prvar <- exp(logH(n-4,fit$Cgq,Ag^2)-logH(n-2,fit$Cgq,Ag^2))+0.5*colSums(A*t(A1)+2*B*t(A2)+C*t(A4))-prmean^2
list(prmean=prmean,prvar=prvar)
}
#-------------#
# Lower bound #
#-------------#
RLBC <- function(y,X,T,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq) {
n <- length(y)
d <- dim(X)[2]
m <- dim(T)[1]/n
t1 <- as.matrix(solve(sigl0,siglq))
lb <- ( -n/2*log(2*pi)+d/2+m+m*log(m)+0.5*determinant(as.matrix(sigaq))$modulus[1]
+0.5*determinant(t1)$modulus[1]-0.5*quadinv(mulq-mul0,sigl0)-0.5*tr(t1)
+log(4*As*Ag/(pi^2))+logH(2*m-2,Csq,As^2)+logH(n-2,Cgq,Ag^2) )
list(lb=lb) }
LBC <- function(y,X,T,Tm,Tp,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq) {
n <- length(y)
d <- dim(X)[2]
m <- dim(T)[1]/n
t1 <- as.matrix(solve(sigl0,siglq))
mz <- MZ(n,m,T,mulq,siglq)
AA <- mz%*%muaq
lb <- ( -n/2*log(2*pi)+d/2+m+m*log(m)+0.5*determinant(as.matrix(sigaq))$modulus[1]
+0.5*determinant(t1)$modulus[1]-0.5*quadinv(mulq-mul0,sigl0)-0.5*tr(t1)
+log(2*As)+log(2*Ag)-2*log(pi)+logH(2*m-2,Csq,As^2)+logH(n-2,Cgq,Ag^2)
-0.5*m*exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))*(crossprod(muaq)+tr(sigaq))
+Csq*exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))
-0.5*exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))*(crossprod(y-2*AA)
+sum(MZTZ(n,m,Tm,Tp,mulq,siglq)*(tcrossprod(muaq)+sigaq)))
+Cgq*exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))  )
list(lb=lb) }
#----------------------------------------------------------------#
# Variational Algorithm (half-Cauchy prior with overrelaxation)  #
# only applicable to small data where n*m*m does not exceed 10^7 #
#----------------------------------------------------------------#
VARC <- function(y,X,T,As,Ag,mul0,sigl0,tol=1.0e-5,fac=1.5,fit=NULL,iter=500) {
n <- length(y)
d <- dim(X)[2]
m <- dim(T)[1]/n
Tm <- matrix(0,(n*m*m),d)
Tp <- matrix(0,(n*m*m),d)
for (i in 1:n) {
for (r in 1:m) {
Tm[((i-1)*(m^2)+(r-1)*m+1):((i-1)*(m^2)+r*m),] <- matrix(rep(T[((i-1)*m+r),],m),m,d,byrow=TRUE)-T[((i-1)*m+1):(i*m),]
Tp[((i-1)*(m^2)+(r-1)*m+1):((i-1)*(m^2)+r*m),] <- matrix(rep(T[((i-1)*m+r),],m),m,d,byrow=TRUE)+T[((i-1)*m+1):(i*m),]
}}
if (is.null(fit)) {
# Initialize Csq,Cgq #
vares <- var(y)
Cgq <- (n/2-1)*vares/4
Csq <- (m-1)*vares
# Initialize mulq,siglq #
mulq <- rep(0.5,d)
siglq <- 0.5*diag(d)
# initialize muaq,sigaq #
EqZ <- MZ(n,m,T,mulq,siglq)
EqZTZ <- MZTZ(n,m,Tm,Tp,mulq,siglq)
Eqinvs2 <- exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))
Eqinvg2 <- exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))
sigaq <- solve(m*Eqinvs2*diag(2*m) + Eqinvg2*EqZTZ)
muaq <- as.vector(crossprod(sigaq, Eqinvg2*crossprod(EqZ,y)))
lbold <- -10e7
lbrecord <- NULL
count <- 0
a <- 1
apre <- 1
} else {
Cgq <- fit$Cgq
Csq <- fit$Csq
mulq <- fit$mulq
siglq <- fit$siglq
muaq <- fit$muaq
sigaq <- fit$sigaq
lbold <- fit$lb
lbrecord <- fit$lbrecord
count <- dim(fit$lbrecord)[1]
mulqpre <- fit$mulq
siglq <- fit$siglq
apre <- fit$apre
}
AL <- sigaq + tcrossprod(muaq)
dif <- 10
DIFF <- 1
while ( dif>tol & count<iter ) {
count <- count+1
if (count>1) {a <- fac*apre}
Eqinvs2 <- exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))
Eqinvg2 <- exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))
# update mulq,siglq #
A <- as.vector(AL[1:m,1:m])
B <- as.vector(AL[1:m,(m+1):(2*m)])
C <- as.vector(AL[(m+1):(2*m),(m+1):(2*m)])
T1 <- T%*%mulq
T2 <- rep(-y,rep(m,n))*exp(-0.5*rowSums((T%*%siglq)*T))
F1 <- -crossprod(as.vector(T2*(muaq[1:m]*cos(T1)+muaq[(m+1):(2*m)]*sin(T1)))*T,T)
F3 <- 2*colSums(as.vector(T2*(muaq[(m+1):(2*m)]*cos(T1)-muaq[1:m]*sin(T1)))*T)
T3m <- Tm%*%mulq
T3p <- Tp%*%mulq
T4m <- exp(-0.5*rowSums((Tm%*%siglq)*Tm))
T4p <- exp(-0.5*rowSums((Tp%*%siglq)*Tp))
F2 <- -0.25*( crossprod(as.vector(T4m*((A+C)*cos(T3m)+2*B*sin(T3m)))*Tm,Tm)
+ crossprod(as.vector(T4p*((A-C)*cos(T3p)+2*B*sin(T3p)))*Tp,Tp) )
F4 <- 0.5*colSums( as.vector(T4m*(-(A+C)*sin(T3m)+2*B*cos(T3m)))*Tm
+ as.vector(T4p*((C-A)*sin(T3p)+2*B*cos(T3p)))*Tp  )
temp1 <- solve(sigl0)+Eqinvg2*(F1+F2)
temp2 <- solve(sigl0,mul0-mulq)-0.5*Eqinvg2*(F3+F4)
siglqnew <- solve((1-a)*solve(siglq)+a*temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
while (isSymmetric(siglqnew,tol=1.0e-10)==FALSE | any(Re(EV)<0) ) {
a <- 2/3*a
siglqnew <- solve((1-a)*solve(siglq)+a*temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
}
siglq <- siglqnew
mulq <- mulq+a*crossprod(siglq,temp2)
apre <- a
EqZ <- MZ(n,m,T,mulq,siglq)
EqZTZ <- MZTZ(n,m,Tm,Tp,mulq,siglq)
# update muaq,sigaq #
sigaq <- solve(m*Eqinvs2*diag(2*m)+Eqinvg2*EqZTZ)
muaq <- as.vector(crossprod(sigaq, Eqinvg2*crossprod(EqZ,y)))
# update Cgq,Csq #
AA <- EqZ%*%muaq
AL <- sigaq+tcrossprod(muaq)
Csq <- m/2*as.numeric(crossprod(muaq)+tr(sigaq))
Cgq <- 0.5*as.numeric(crossprod(y,y-2*AA)+sum(AL*EqZTZ))
lb <- RLBC(y,X,T,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq)$lb
DIFF <- lb-lbold
if (count==1 & DIFF<0) {
cat('DIVERGE',"\n")
break}
if (DIFF>0){
mulqpre <- mulq
siglqpre <- siglq
} else {
count <- count+1
a <- 1
siglqnew <- solve(temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
while (isSymmetric(siglqnew,tol=1.0e-10)==FALSE | any(Re(EV)<0) ) {
a <- 2/3*a
siglqnew <- solve((1-a)*solve(siglq)+a*temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
}
siglq <- siglqnew
mulq <- mulqpre+a*crossprod(siglq,temp2)
apre <- a
EqZ <- MZ(n,m,T,mulq,siglq)
EqZTZ <- MZTZ(n,m,Tm,Tp,mulq,siglq)
# update muaq,sigaq #
sigaq <- solve(m*Eqinvs2*diag(2*m)+Eqinvg2*EqZTZ)
muaq <- as.vector(crossprod(sigaq,Eqinvg2*crossprod(EqZ,y)))
# update Cgq,Csq #
AA <- EqZ%*%muaq
AL <- sigaq+tcrossprod(muaq)
Csq <- m/2*as.numeric(crossprod(muaq)+tr(sigaq))
Cgq <- 0.5*as.numeric(crossprod(y,y-2*AA)+sum(AL*EqZTZ))
lb <- RLBC(y,X,T,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq)$lb
}
lbrecord <- rbind(lbrecord,c(count,lb))
dif <- abs((lb-lbold)/lb)
lbold <- lb
cat(count,lb,round(mulq,1),Cgq,Csq,dif,DIFF,apre,"\n")
}
list(Cgq=Cgq,Csq=Csq,muaq=muaq,sigaq=sigaq,
mulq=mulq,siglq=siglq,lb=lb,lbrecord=lbrecord,apre=apre)
}
setwd('~/Desktop/VB/GP_mixed/GPVB/')
path=getwd()
source(paste(path,'/GP_code.R',sep=''))
### Data loading
# y
y_tr=scan(paste(path,'/PendulumData/T_tr.txt',sep=''))
ntr=length(y_tr)
y_tst=scan(paste(path,'/PendulumData/T_tst.txt',sep=''))
ntst=length(y_tst)
# X
d=9
X_tr=matrix(scan(paste(path,'/PendulumData/X_tr.txt',sep='')),nr=ntr,nc=d,byrow=T)
X_tst=matrix(scan(paste(path,'/PendulumData/X_tst.txt',sep='')),nr=ntr,nc=d,byrow=T)
# GP_variationial
m=10
S <- rmvnorm(m,mean=rep(0,d),sigma=diag(d))
T=Tfunc(X=X_tr,S=S)$T
fit=VARC(y=y_tr,X=X_tr,T=T,As=25,Ag=25,mul0=rep(0,d),sigl0=10*diag(d),fac=1.5)
names(fit)
par(mfrow=c(1,2))
plot(fit$lbrecord[,2])
setwd('~/Desktop/VB/GPVB/GPVB/')
path=getwd()
source(paste(path,'/GP_code.R',sep=''))
### Data loading
# y
y_tr=scan(paste(path,'/PendulumData/T_tr.txt',sep=''))
ntr=length(y_tr)
y_tst=scan(paste(path,'/PendulumData/T_tst.txt',sep=''))
ntst=length(y_tst)
# X
d=9
X_tr=matrix(scan(paste(path,'/PendulumData/X_tr.txt',sep='')),nr=ntr,nc=d,byrow=T)
X_tst=matrix(scan(paste(path,'/PendulumData/X_tst.txt',sep='')),nr=ntr,nc=d,byrow=T)
# GP_variationial
m=10
S <- rmvnorm(m,mean=rep(0,d),sigma=diag(d))
T=Tfunc(X=X_tr,S=S)$T
fit=VARC(y=y_tr,X=X_tr,T=T,As=25,Ag=25,mul0=rep(0,d),sigl0=10*diag(d),fac=1.5)
names(fit)
par(mfrow=c(1,2))
plot(fit$lbrecord[,2])
fit$siglq
diag(fit$siglq)
clear()
library(mvtnorm)
library(FNN)            # Get k nearest neighbours
# library(lhs)          # Latin hypercube sampling
# library(mlegp)        # fit guassian process using max likelihood
# library(calibrate)    # To label points on scatterplot
# neigh <- attr(knn(train, test, labels, k = 2, algorithm="cover_tree"),"nn.index")
# this returns the indices of the k nearest neighbours
#-----------#
# Functions #
#-----------#
# function to compute t(x)%*%A^(-1)%*%x (x is a vector)
quadinv <- function(x,A) sum(x*solve(A,x))
# function to compute trace of A
tr <- function(A) sum(diag(as.matrix(A)))
# function to compute tr(A^(-1)%*%B)
# tri <- function(A,B) sum(diag(as.matrix(solve(A,B))))
# rescale variables to have range [-1,1], not necessarily with mean zero though often close
# scle <- function(x) { -1+2*(x-min(x))/(max(x)-min(x)) }
# NMSE: normalized mean square error
# MNLP: Mean negative log probability
# yp: observations for testing
# prmean: predictive mean
# prvar: predictive variance
NMSE <- function(ypr,prmean,y) {mean((ypr-prmean)^2)/mean((ypr-mean(y))^2)}
MNLP <- function(ypr,prmean,prvar) {0.5*mean( (ypr-prmean)^2/prvar+log(prvar)+log(2*pi) )}
#----------------------------------#
# function to construct T from X,S #
#----------------------------------#
Tfunc <- function(X,S) {
n <- dim(X)[1]
m <- dim(S)[1]
d <- dim(S)[2]
T <- matrix(0,(n*m),d)
for (i in 1:n) {
T[((i-1)*m+1):(i*m),] <- S*matrix(rep(X[i,],m),nrow=m,ncol=d,byrow=TRUE)}
list(T=T)
}
#---------------------#
# Mean of Z and Z^T Z #
#---------------------#
MZ <- function(n,m,T,mulq,siglq) {
mz <- matrix(0,n,(2*m))
t1 <- T%*%mulq
t2 <- exp(-0.5*rowSums((T%*%siglq)*T))
mz[,1:m] <- matrix(cos(t1)*t2,n,m,byrow=TRUE)
mz[,(m+1):(2*m)] <- matrix(sin(t1)*t2,n,m,byrow=TRUE)
return(mz)}
MZTZ <- function(n,m,Tm,Tp,mulq,siglq) {
mztz <- matrix(0,(2*m),(2*m))
T3m <- matrix(Tm%*%mulq,n,m^2,byrow=TRUE)
T3p <- matrix(Tp%*%mulq,n,m^2,byrow=TRUE)
T4m <- matrix(exp(-0.5*rowSums((Tm%*%siglq)*Tm)),n,m^2,byrow=TRUE)
T4p <- matrix(exp(-0.5*rowSums((Tp%*%siglq)*Tp)),n,m^2,byrow=TRUE)
mztz[1:m,1:m] <- 0.5*matrix(colSums(T4m*cos(T3m)+T4p*cos(T3p)),m,m,byrow=TRUE)
mztz[1:m,(m+1):(2*m)] <- 0.5*matrix(colSums(-T4m*sin(T3m)+T4p*sin(T3p)),m,m,byrow=TRUE)
mztz[(m+1):(2*m),1:m] <- t(mztz[1:m,(m+1):(2*m)])
mztz[(m+1):(2*m),(m+1):(2*m)] <- 0.5*matrix(colSums(T4m*cos(T3m)-T4p*cos(T3p)),m,m,byrow=TRUE)
return(mztz) }
#----------------------------------#
# Function to compute log H(p,q,r) #
#----------------------------------#
h <- function(x,p,q,r) { p*log(x)-q*x^2-log(r+x^(-2)) }
h1 <- function(x,p,q,r) { p/x-2*q*x+2/(r*x^3+x) } #first derivative of h
h2 <- function(x,p,q,r) { -p/x^2-2*q-2*(3*r*x^2+1)/(r*x^3+x)^2 } #second derivative of h
hmaxpt <- function(p,q,r) { sqrt((p*r-2*q+sqrt((p*r-2*q)^2+8*q*r*(p+2)))/(4*q*r)) }
logH <- function(p,q,r){
mu0 <- hmaxpt(p,q,r)
sig0 <- (-h2(mu0,p,q,r))^(-0.5)
hmu0 <- h(mu0,p,q,r)
sig02 <- sig0*sqrt(2)
lowerlimit <- (-mu0)/sig02
integrand <- function(u) {exp(h(mu0+u*sig02,p,q,r)-hmu0)}
b <- 1
epsilon <- 1
while (epsilon > 1.0e-5) {
b <- 2*b
if (-b > lowerlimit) {
epsilon <- max(integrand(b),integrand(-b)) } else {epsilon <- integrand(b)} }
if (-b > lowerlimit) {I0 <- integrate(integrand, lower=-b, upper=b)$value
} else {I0 <- integrate(integrand, lower=lowerlimit, upper=b)$value}
hmu0+log(sig02)+log(I0)}
#--------------------------------------------------------------------#
# Function to compute expectation of sigma^2,gamma^2,sigma and gamma #
#--------------------------------------------------------------------#
Es2 <- function(C,m,As){ exp(logH(2*m-4,C,As^2)-logH(2*m-2,C,As^2))}
Eg2 <- function(C,n,Ag){ exp(logH(n-4,C,Ag^2)-logH(n-2,C,Ag^2))}
Es <- function(C,m,As){ exp(logH(2*m-3,C,As^2)-logH(2*m-2,C,As^2))}
Eg <- function(C,n,Ag){ exp(logH(n-3,C,Ag^2)-logH(n-2,C,Ag^2))}
#----------------------------------------------------------------------#
# Function to find posterior predictive distribution mean and variance #
#----------------------------------------------------------------------#
POSTPREDC <- function(npr,Tpr,fit,n,Ag){
m <- dim(Tpr)[1]/npr
d <- dim(Tpr)[2]
prmean <- MZ(npr,m,Tpr,fit$mulq,fit$siglq)%*%fit$muaq
AL <- tcrossprod(fit$muaq)+fit$sigaq
A <- as.vector(AL[1:m,1:m])
B <- as.vector(AL[1:m,(m+1):(2*m)])
C <- as.vector(AL[(m+1):(2*m),(m+1):(2*m)])
Tprm <- matrix(0,npr*m*m,d)
Tprp <- matrix(0,npr*m*m,d)
for (i in 1:npr) {
for (r in 1:m) {
Tprm[((i-1)*(m^2)+(r-1)*m+1):((i-1)*(m^2)+r*m),] <- matrix(rep(Tpr[((i-1)*m+r),],m),m,d,byrow=TRUE)-Tpr[((i-1)*m+1):(i*m),]
Tprp[((i-1)*(m^2)+(r-1)*m+1):((i-1)*(m^2)+r*m),] <- matrix(rep(Tpr[((i-1)*m+r),],m),m,d,byrow=TRUE)+Tpr[((i-1)*m+1):(i*m),]
}}
T3m <- matrix(Tprm%*%fit$mulq,npr,m^2,byrow=TRUE)
T3p <- matrix(Tprp%*%fit$mulq,npr,m^2,byrow=TRUE)
T4m <- matrix(exp(-0.5*rowSums((Tprm%*%fit$siglq)*Tprm)),npr,m^2,byrow=TRUE)
T4p <- matrix(exp(-0.5*rowSums((Tprp%*%fit$siglq)*Tprp)),npr,m^2,byrow=TRUE)
A1 <- T4m*cos(T3m)+T4p*cos(T3p)
A2 <- T4m*sin(T3m)+T4p*sin(T3p)
A4 <- T4m*cos(T3m)-T4p*cos(T3p)
prvar <- exp(logH(n-4,fit$Cgq,Ag^2)-logH(n-2,fit$Cgq,Ag^2))+0.5*colSums(A*t(A1)+2*B*t(A2)+C*t(A4))-prmean^2
list(prmean=prmean,prvar=prvar)
}
#-------------#
# Lower bound #
#-------------#
RLBC <- function(y,X,T,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq) {
n <- length(y)
d <- dim(X)[2]
m <- dim(T)[1]/n
t1 <- as.matrix(solve(sigl0,siglq))
lb <- ( -n/2*log(2*pi)+d/2+m+m*log(m)+0.5*determinant(as.matrix(sigaq))$modulus[1]
+0.5*determinant(t1)$modulus[1]-0.5*quadinv(mulq-mul0,sigl0)-0.5*tr(t1)
+log(4*As*Ag/(pi^2))+logH(2*m-2,Csq,As^2)+logH(n-2,Cgq,Ag^2) )
list(lb=lb) }
LBC <- function(y,X,T,Tm,Tp,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq) {
n <- length(y)
d <- dim(X)[2]
m <- dim(T)[1]/n
t1 <- as.matrix(solve(sigl0,siglq))
mz <- MZ(n,m,T,mulq,siglq)
AA <- mz%*%muaq
lb <- ( -n/2*log(2*pi)+d/2+m+m*log(m)+0.5*determinant(as.matrix(sigaq))$modulus[1]
+0.5*determinant(t1)$modulus[1]-0.5*quadinv(mulq-mul0,sigl0)-0.5*tr(t1)
+log(2*As)+log(2*Ag)-2*log(pi)+logH(2*m-2,Csq,As^2)+logH(n-2,Cgq,Ag^2)
-0.5*m*exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))*(crossprod(muaq)+tr(sigaq))
+Csq*exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))
-0.5*exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))*(crossprod(y-2*AA)
+sum(MZTZ(n,m,Tm,Tp,mulq,siglq)*(tcrossprod(muaq)+sigaq)))
+Cgq*exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))  )
list(lb=lb) }
#----------------------------------------------------------------#
# Variational Algorithm (half-Cauchy prior with overrelaxation)  #
# only applicable to small data where n*m*m does not exceed 10^7 #
#----------------------------------------------------------------#
VARC <- function(y,X,T,As,Ag,mul0,sigl0,tol=1.0e-5,fac=1.5,fit=NULL,iter=500) {
n <- length(y)
d <- dim(X)[2]
m <- dim(T)[1]/n
Tm <- matrix(0,(n*m*m),d)
Tp <- matrix(0,(n*m*m),d)
for (i in 1:n) {
for (r in 1:m) {
Tm[((i-1)*(m^2)+(r-1)*m+1):((i-1)*(m^2)+r*m),] <- matrix(rep(T[((i-1)*m+r),],m),m,d,byrow=TRUE)-T[((i-1)*m+1):(i*m),]
Tp[((i-1)*(m^2)+(r-1)*m+1):((i-1)*(m^2)+r*m),] <- matrix(rep(T[((i-1)*m+r),],m),m,d,byrow=TRUE)+T[((i-1)*m+1):(i*m),]
}}
if (is.null(fit)) {
# Initialize Csq,Cgq #
vares <- var(y)
Cgq <- (n/2-1)*vares/4
Csq <- (m-1)*vares
# Initialize mulq,siglq #
mulq <- rep(0.5,d)
siglq <- 0.5*diag(d)
# initialize muaq,sigaq #
EqZ <- MZ(n,m,T,mulq,siglq)
EqZTZ <- MZTZ(n,m,Tm,Tp,mulq,siglq)
Eqinvs2 <- exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))
Eqinvg2 <- exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))
sigaq <- solve(m*Eqinvs2*diag(2*m) + Eqinvg2*EqZTZ)
muaq <- as.vector(crossprod(sigaq, Eqinvg2*crossprod(EqZ,y)))
lbold <- -10e7
lbrecord <- NULL
count <- 0
a <- 1
apre <- 1
} else {
Cgq <- fit$Cgq
Csq <- fit$Csq
mulq <- fit$mulq
siglq <- fit$siglq
muaq <- fit$muaq
sigaq <- fit$sigaq
lbold <- fit$lb
lbrecord <- fit$lbrecord
count <- dim(fit$lbrecord)[1]
mulqpre <- fit$mulq
siglq <- fit$siglq
apre <- fit$apre
}
AL <- sigaq + tcrossprod(muaq)
dif <- 10
DIFF <- 1
while ( dif>tol & count<iter ) {
count <- count+1
if (count>1) {a <- fac*apre}
Eqinvs2 <- exp(logH(2*m,Csq,As^2)-logH(2*m-2,Csq,As^2))
Eqinvg2 <- exp(logH(n,Cgq,Ag^2)-logH(n-2,Cgq,Ag^2))
# update mulq,siglq #
A <- as.vector(AL[1:m,1:m])
B <- as.vector(AL[1:m,(m+1):(2*m)])
C <- as.vector(AL[(m+1):(2*m),(m+1):(2*m)])
T1 <- T%*%mulq
T2 <- rep(-y,rep(m,n))*exp(-0.5*rowSums((T%*%siglq)*T))
F1 <- -crossprod(as.vector(T2*(muaq[1:m]*cos(T1)+muaq[(m+1):(2*m)]*sin(T1)))*T,T)
F3 <- 2*colSums(as.vector(T2*(muaq[(m+1):(2*m)]*cos(T1)-muaq[1:m]*sin(T1)))*T)
T3m <- Tm%*%mulq
T3p <- Tp%*%mulq
T4m <- exp(-0.5*rowSums((Tm%*%siglq)*Tm))
T4p <- exp(-0.5*rowSums((Tp%*%siglq)*Tp))
F2 <- -0.25*( crossprod(as.vector(T4m*((A+C)*cos(T3m)+2*B*sin(T3m)))*Tm,Tm)
+ crossprod(as.vector(T4p*((A-C)*cos(T3p)+2*B*sin(T3p)))*Tp,Tp) )
F4 <- 0.5*colSums( as.vector(T4m*(-(A+C)*sin(T3m)+2*B*cos(T3m)))*Tm
+ as.vector(T4p*((C-A)*sin(T3p)+2*B*cos(T3p)))*Tp  )
temp1 <- solve(sigl0)+Eqinvg2*(F1+F2)
temp2 <- solve(sigl0,mul0-mulq)-0.5*Eqinvg2*(F3+F4)
siglqnew <- solve((1-a)*solve(siglq)+a*temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
while (isSymmetric(siglqnew,tol=1.0e-10)==FALSE | any(Re(EV)<0) ) {
a <- 2/3*a
siglqnew <- solve((1-a)*solve(siglq)+a*temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
}
siglq <- siglqnew
mulq <- mulq+a*crossprod(siglq,temp2)
apre <- a
EqZ <- MZ(n,m,T,mulq,siglq)
EqZTZ <- MZTZ(n,m,Tm,Tp,mulq,siglq)
# update muaq,sigaq #
sigaq <- solve(m*Eqinvs2*diag(2*m)+Eqinvg2*EqZTZ)
muaq <- as.vector(crossprod(sigaq, Eqinvg2*crossprod(EqZ,y)))
# update Cgq,Csq #
AA <- EqZ%*%muaq
AL <- sigaq+tcrossprod(muaq)
Csq <- m/2*as.numeric(crossprod(muaq)+tr(sigaq))
Cgq <- 0.5*as.numeric(crossprod(y,y-2*AA)+sum(AL*EqZTZ))
lb <- RLBC(y,X,T,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq)$lb
DIFF <- lb-lbold
if (count==1 & DIFF<0) {
cat('DIVERGE',"\n")
break}
if (DIFF>0){
mulqpre <- mulq
siglqpre <- siglq
} else {
count <- count+1
a <- 1
siglqnew <- solve(temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
while (isSymmetric(siglqnew,tol=1.0e-10)==FALSE | any(Re(EV)<0) ) {
a <- 2/3*a
siglqnew <- solve((1-a)*solve(siglq)+a*temp1)
EV <- eigen(siglqnew,only.values=TRUE)$values
}
siglq <- siglqnew
mulq <- mulqpre+a*crossprod(siglq,temp2)
apre <- a
EqZ <- MZ(n,m,T,mulq,siglq)
EqZTZ <- MZTZ(n,m,Tm,Tp,mulq,siglq)
# update muaq,sigaq #
sigaq <- solve(m*Eqinvs2*diag(2*m)+Eqinvg2*EqZTZ)
muaq <- as.vector(crossprod(sigaq,Eqinvg2*crossprod(EqZ,y)))
# update Cgq,Csq #
AA <- EqZ%*%muaq
AL <- sigaq+tcrossprod(muaq)
Csq <- m/2*as.numeric(crossprod(muaq)+tr(sigaq))
Cgq <- 0.5*as.numeric(crossprod(y,y-2*AA)+sum(AL*EqZTZ))
lb <- RLBC(y,X,T,As,Ag,mul0,sigl0,Csq,Cgq,muaq,sigaq,mulq,siglq)$lb
}
lbrecord <- rbind(lbrecord,c(count,lb))
dif <- abs((lb-lbold)/lb)
lbold <- lb
cat(count,lb,round(mulq,1),Cgq,Csq,dif,DIFF,apre,"\n")
}
list(Cgq=Cgq,Csq=Csq,muaq=muaq,sigaq=sigaq,
mulq=mulq,siglq=siglq,lb=lb,lbrecord=lbrecord,apre=apre)
}
path=getwd()
source(paste(path,'/GP_code.R',sep=''))
### Data loading
# y
y_tr=scan(paste(path,'/PendulumData/T_tr.txt',sep=''))
ntr=length(y_tr)
y_tst=scan(paste(path,'/PendulumData/T_tst.txt',sep=''))
ntst=length(y_tst)
# X
d=9
X_tr=matrix(scan(paste(path,'/PendulumData/X_tr.txt',sep='')),nr=ntr,nc=d,byrow=T)
X_tst=matrix(scan(paste(path,'/PendulumData/X_tst.txt',sep='')),nr=ntr,nc=d,byrow=T)
# GP_variationial
m=10
S <- rmvnorm(m,mean=rep(0,d),sigma=diag(d))
T=Tfunc(X=X_tr,S=S)$T
fit=VARC(y=y_tr,X=X_tr,T=T,As=25,Ag=25,mul0=rep(0,d),sigl0=10*diag(d),fac=1.5)
names(fit)
par(mfrow=c(1,2))
plot(fit$lbrecord[,2])
