// This code is for Gauss-Hermite quadrature with probabilist's Hermite polynomials.
// Therefore, the function that is being evaluated should have the kernel e^(-x^2 / 2),
// not e^(-x^2) which is the physicist's version.

#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
double GH_quad(Function f) {
  NumericVector x(30);
  x(0) = -9.7062360;
  x(1) = -8.6808377;
  x(2) = -7.8250517;
  x(3) = -7.0553969;
  x(4) = -6.3399977;
  x(5) = -5.6623819;
  x(6) = -5.0126006;
  x(7) = -4.3840204;
  x(8) = -3.7718944;
  x(9) = -3.1726346;
  x(10) = -2.5834021;
  x(11) = -2.0018586;
  x(12) = -1.4260057;
  x(13) = -0.8540734;
  x(14) = -0.2844388;
  x(15) = 0.2844388;
  x(16) = 0.8540734;
  x(17) = 1.4260057;
  x(18) = 2.0018586;
  x(19) = 2.5834021;
  x(20) = 3.1726346;
  x(21) = 3.7718944;
  x(22) = 4.3840204;
  x(23) = 5.0126006;
  x(24) = 5.6623819;
  x(25) = 6.3399977;
  x(26) = 7.0553969;
  x(27) = 7.8250517;
  x(28) = 8.6808377;
  x(29) = 9.7062360;

  NumericVector w(30);
  w(0) = 1.640807e-21;
  w(1) = 1.585561e-17;
  w(2) = 1.624080e-14;
  w(3) = 4.573426e-12;
  w(4) = 5.178459e-10;
  w(5) = 2.882175e-08;
  w(6) = 8.909089e-07;
  w(7) = 1.657998e-05;
  w(8) = 1.965129e-04;
  w(9) = 1.544707e-03;
  w(10) = 8.295748e-03;
  w(11) = 3.111177e-02;
  w(12) = 8.278684e-02;
  w(13) = 1.580470e-01;
  w(14) = 2.180000e-01;
  w(15) = 2.180000e-01;
  w(16) = 1.580470e-01;
  w(17) = 8.278684e-02;
  w(18) = 3.111177e-02;
  w(19) = 8.295748e-03;
  w(20) = 1.544707e-03;
  w(21) = 1.965129e-04;
  w(22) = 1.657998e-05;
  w(23) = 8.909089e-07;
  w(24) = 2.882175e-08;
  w(25) = 5.178459e-10;
  w(26) = 4.573426e-12;
  w(27) = 1.624080e-14;
  w(28) = 1.585561e-17;
  w(29) = 1.640807e-21;

  double z = 0;
  for (int i = 0; i < 30; ++i) {
    z += w(i) * Rcpp::as<double>(f(x(i)));
  }
  return z;
}






